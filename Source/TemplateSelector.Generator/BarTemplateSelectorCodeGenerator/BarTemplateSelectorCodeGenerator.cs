using Bars.Mvvm.FluidApi.Common;
using System;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Bars.Mvvm.Resource.Generator;

internal class BarTemplateSelectorCodeGenerator
{
    public static BarTemplateSelectorCodeGenerator Instance { get; } = new();

    public static string Generate(ClassModel classModel)
    {
        StringBuilder sourceBuilder = new();
        sourceBuilder.AppendLine("// <auto-generated/>");
        sourceBuilder.AppendLine("using System;");
        sourceBuilder.AppendLine("using System.Windows;");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine($"namespace {classModel.Namespace};");
        sourceBuilder.AppendLine();

        GenerateResourceKeys(classModel, sourceBuilder);
        sourceBuilder.AppendLine();
        GenerateResourceDictionary(classModel, sourceBuilder);
        sourceBuilder.AppendLine();
        GenerateSelector(classModel, sourceBuilder);
        return sourceBuilder.ToString();
    }

    private static void GenerateResourceDictionary(ClassModel classModel, StringBuilder sourceBuilder)
    {
        var dictionaryClassName = $"{classModel.Name}ResourceDictionary";
        sourceBuilder.AppendLine("/// <summary>");
        sourceBuilder.AppendLine("/// Represents a <see cref=\"ResourceDictionary\"/> related to the template resources objects defined in this assembly.");
        sourceBuilder.AppendLine("/// </summary>");
        sourceBuilder.AppendLine($"public sealed partial class {dictionaryClassName} : ResourceDictionary");
        sourceBuilder.AppendLineStartBracket(0);
        sourceBuilder.AppendLineWithIndent(1, $"[ThreadStatic]");
        sourceBuilder.AppendLineWithIndent(1, $"private static {dictionaryClassName} _instance;");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLineWithIndent(1, $"/// <summary>");
        sourceBuilder.AppendLineWithIndent(1, $"/// Gets the singleton instance of the resource dictionary.");
        sourceBuilder.AppendLineWithIndent(1, $"/// </summary>");
        sourceBuilder.AppendLineWithIndent(1, $"/// <remarks>The singleton instance of the is not shared between threads.</remarks>");
        sourceBuilder.AppendLineWithIndent(1,
            $"public static {dictionaryClassName} Instance => _instance ??= new {dictionaryClassName}();");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLineWithIndent(1, $"public {dictionaryClassName}()");
        sourceBuilder.AppendLineStartBracket(1);
        // sourceBuilder.AppendLineWithIndent(2, "#pragma warning disable CS0184");
        // sourceBuilder.AppendLineWithIndent(2, "if(this is System.Windows.Markup.IComponentConnector connector)");
        // sourceBuilder.AppendLineWithIndent(2, "#pragma warning restore CS0184");
        // sourceBuilder.AppendLineStartBracket(2);
        // sourceBuilder.AppendLineWithIndent(3, "connector.InitializeComponent();");
        // sourceBuilder.AppendLineEndBracket(2);
        sourceBuilder.AppendLineEndBracket(1);
        sourceBuilder.AppendLineEndBracket(0);
    }

    private static void GenerateResourceKeys(ClassModel classModel, StringBuilder sourceBuilder)
    {
        var resourceKayClassName = $"{classModel.Name}ResourceKeys";
        sourceBuilder.AppendLine("/// <summary>");
        sourceBuilder.AppendLine("/// Represents a <see cref=\"ResourceDictionary\"/> related to the template resources objects defined in this assembly.");
        sourceBuilder.AppendLine("/// </summary>");
        sourceBuilder.AppendLine($"public static class {resourceKayClassName}");
        sourceBuilder.AppendLineStartBracket(0);
        foreach (var propertyName in classModel.Properties.Select(p => p.Name).Distinct())
        {
            string variableName = $"_{Char.ToLowerInvariant(propertyName[0])}{propertyName.Substring(1)}";
            sourceBuilder.AppendLineWithIndent(1, $"private static ComponentResourceKey {variableName};");
            sourceBuilder.AppendLineWithIndent(1, "/// <summary>");
            sourceBuilder.AppendLineWithIndent(1, $"/// Gets the <see cref=\"ComponentResourceKey\" /> for <see cref=\"{classModel.Name}.{propertyName}\" />.");
            sourceBuilder.AppendLineWithIndent(1, "/// </summary>");
            sourceBuilder.AppendLineWithIndent(1, $"public static ResourceKey {propertyName}");
            sourceBuilder.AppendLineWithIndent(2, $"=> {variableName} ??= new ComponentResourceKey(typeof({resourceKayClassName}), nameof({propertyName}));");
            sourceBuilder.AppendLine();
        }

        sourceBuilder.AppendLineEndBracket(0);
    }

    private static void GenerateSelector(ClassModel classModel, StringBuilder sourceBuilder)
    {
        sourceBuilder.AppendLine($"sealed partial class {classModel.Name}");
        sourceBuilder.AppendLineStartBracket(0);
        sourceBuilder.AppendLineWithIndent(1, $"public {classModel.Name}()");
        sourceBuilder.AppendLineStartBracket(1);

        sourceBuilder.AppendLineWithIndent(2, $"var dictionary = {classModel.Name}ResourceDictionary.Instance;");

        foreach (var property in classModel.Properties)
        {
            if (property != null)
            {
                sourceBuilder.AppendLineWithIndent(2, $"{property.Name} = dictionary[{classModel.Name}ResourceKeys.{property.Name}] as {property.Type};");
            }
        }

        sourceBuilder.AppendLineEndBracket(1);
        sourceBuilder.AppendLineEndBracket(0);
    }
}
