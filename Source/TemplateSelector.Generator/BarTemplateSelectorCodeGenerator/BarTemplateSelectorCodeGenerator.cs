using Bars.Mvvm.FluidApi.Common;
using System;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Scriban;
using System.Collections.Immutable;

namespace Bars.Mvvm.Resource.Generator;

internal class BarTemplateSelectorCodeGenerator
{
    public static BarTemplateSelectorCodeGenerator Instance { get; } = new();
    private readonly Template _resourceKeyTemplate = Template.Parse(EmbeddedResource.GetContent("Templates/ComponentResourceKey.fg-cs"));
    private readonly Template _resourceDictionaryInstanceTemplate = Template.Parse(EmbeddedResource.GetContent("Templates/ResourceDictionaryInstance.fg-cs"));

    public string Generate(INamedTypeSymbol classSymbol, INamedTypeSymbol dictionaryType)
    {
        StringBuilder sourceBuilder = new();
        sourceBuilder.AppendLine("// <auto-generated/>");
        sourceBuilder.AppendLine("using System;");
        sourceBuilder.AppendLine("using System.Windows;");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine($"namespace {classSymbol.ContainingNamespace.ToDisplayString()};");
        sourceBuilder.AppendLine();

        GenerateResourceKeys(classSymbol, sourceBuilder);
        sourceBuilder.AppendLine();
        GenerateResourceDictionary(classSymbol, sourceBuilder, dictionaryType);
        sourceBuilder.AppendLine();
        GenerateSelector(classSymbol, sourceBuilder);
        return sourceBuilder.ToString();
    }

    private void GenerateResourceDictionary(INamedTypeSymbol classModel, StringBuilder sourceBuilder, INamedTypeSymbol dictionaryType)
    {
        var dictionaryClassName = $"{classModel.Name}ResourceDictionary";
        sourceBuilder.AppendLine("/// <summary>");
        sourceBuilder.AppendLine("/// Represents a <see cref=\"ResourceDictionary\"/> related to the template resources objects defined in this assembly.");
        sourceBuilder.AppendLine("/// </summary>");
        sourceBuilder.AppendLine($"[System.CodeDom.Compiler.GeneratedCode(\"{nameof(BarTemplateSelectorSourceGenerator)}\", \"1.0.0\")]");
        sourceBuilder.AppendLine($"public sealed partial class {dictionaryClassName} : ResourceDictionary");
        sourceBuilder.AppendLineStartBracket(0);
        sourceBuilder.Append(_resourceDictionaryInstanceTemplate.Render(new {
            ResourceDictionaryClassName = dictionaryClassName,
        }, member => member.Name));
        sourceBuilder.AppendLine();

        sourceBuilder.AppendLineWithIndent(1, $"public {dictionaryClassName}()");
        sourceBuilder.AppendLineStartBracket(1);
        var partsImplementingInterface = dictionaryType.AllInterfaces.Any(i => i.ToDisplayString() == "System.Windows.Markup.IComponentConnector");
        if (partsImplementingInterface)
        {
            sourceBuilder.AppendLineWithIndent(2, "InitializeComponent();");
        }
        else
        {
            sourceBuilder.AppendLineWithIndent(2, "// No parts implementing System.Windows.Markup.IComponentConnector found");
        }

        sourceBuilder.AppendLineEndBracket(1);
        sourceBuilder.AppendLineEndBracket(0);
    }

    private void GenerateResourceKeys(INamedTypeSymbol classModel, StringBuilder sourceBuilder)
    {
        var resourceKeyClassName = $"{classModel.Name}ResourceKeys";
        sourceBuilder.AppendLine("/// <summary>");
        sourceBuilder.AppendLine("/// Represents a <see cref=\"ResourceDictionary\"/> related to the template resources objects defined in this assembly.");
        sourceBuilder.AppendLine("/// </summary>");
        sourceBuilder.AppendLine($"[System.CodeDom.Compiler.GeneratedCode(\"{nameof(BarTemplateSelectorSourceGenerator)}\", \"1.0.0\")]");
        sourceBuilder.AppendLine($"public static class {resourceKeyClassName}");
        sourceBuilder.AppendLineStartBracket(0);
        var properties = GetProperties(classModel);
        foreach (var propertyName in properties.Select(p => p.Name).Distinct())
        {
            // Find a way to use Scriban to create the entire class with foreach, though I am not
            // sure if it makes anything easier. Just mentioning here as qn example.
            string variableName = $"_{Char.ToLowerInvariant(propertyName[0])}{propertyName.Substring(1)}";
            var keySetter = _resourceKeyTemplate.Render(new
            {
                VariableName = variableName,
                PropertyName = propertyName,
                ResourceKeyClassName = resourceKeyClassName,
            }, member => member.Name);
            sourceBuilder.AppendLine(keySetter);
        }

        sourceBuilder.AppendLineEndBracket(0);
    }

    private static void GenerateSelector(INamedTypeSymbol classModel, StringBuilder sourceBuilder)
    {
        sourceBuilder.AppendLine($"[System.CodeDom.Compiler.GeneratedCode(\"{nameof(BarTemplateSelectorSourceGenerator)}\", \"1.0.0\")]");
        sourceBuilder.AppendLine($"sealed partial class {classModel.Name}");
        sourceBuilder.AppendLineStartBracket(0);
        sourceBuilder.AppendLineWithIndent(1, $"public {classModel.Name}()");
        sourceBuilder.AppendLineStartBracket(1);

        var properties = GetProperties(classModel);
        sourceBuilder.AppendLineWithIndent(2, $"var dictionary = {classModel.Name}ResourceDictionary.Instance;");

        foreach (var property in properties)
        {
            if (property != null)
            {
                sourceBuilder.AppendLineWithIndent(2, $"{property.Name} = dictionary[{classModel.Name}ResourceKeys.{property.Name}] as {property.Type};");
            }
        }

        sourceBuilder.AppendLineEndBracket(1);
        sourceBuilder.AppendLineEndBracket(0);
    }

    private static ImmutableArray<IPropertySymbol> GetProperties(INamedTypeSymbol? classSymbol)
    {
        ImmutableArray<IPropertySymbol> ret = [];
        if (classSymbol == null)
        {
            return ret;
        }

        var properties = classSymbol.GetMembers()
            .OfType<IPropertySymbol>()
            .Where(p => p.DeclaredAccessibility == Accessibility.Public && p is {IsStatic: false, IsReadOnly: false})
            .ToImmutableArray();
        return properties;
    }
}
